'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint strict: true */
/* jshint esversion: 6 */

/**
 * @author oliviercolonna@gmail.com
 * Copyright(c) 2016 Olivier Colonna
 * MIT Licensed
 *
 * ReactVideo
 */

var ReactVideo = function (_React$Component) {
  _inherits(ReactVideo, _React$Component);

  function ReactVideo(props) {
    _classCallCheck(this, ReactVideo);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReactVideo).call(this, props));

    _this.state = {
      volume: 1,
      playbackRate: 1
    };
    return _this;
  }

  /**
   * The canPlayType() method checks if the browser can play the specified audio/video type.
   * @param {string} format, common values (video/mp4, video/webm, audio/mpeg, audio/ogg, audio/mp4).
   * @return {string} format, common values, including codecs.
   */

  _createClass(ReactVideo, [{
    key: 'canPlayType',
    value: function canPlayType(format) {
      return this.refs.ReactVideo.canPlayType(format);
    }

    /**
     * return if the media is currently playing.
     * @return {Boolean} playing, return the playback playing status.
     */

  }, {
    key: 'isPlaying',
    value: function isPlaying() {
      var isPaused = Boolean(this.refs.ReactVideo.paused);
      return !isPaused;
    }

    /**
     * get whenever the media playback has ended.
     * @return {Boolean} ended, return the playback ended status.
     */

  }, {
    key: 'isEnded',
    value: function isEnded() {
      return Boolean(this.refs.ReactVideo.ended);
    }

    /**
     * Will begin loading the media immediately.
     */

  }, {
    key: 'load',
    value: function load() {
      this.refs.ReactVideo.load();
    }

    /**
     * Starts or resumes media playback.
     */

  }, {
    key: 'play',
    value: function play() {
      this.refs.ReactVideo.play();
    }

    /**
     * Pauses media playback.
     */

  }, {
    key: 'pause',
    value: function pause() {
      this.refs.ReactVideo.pause();
    }

    /**
     * Stops media playback and returns to the beginning.
     */

  }, {
    key: 'stop',
    value: function stop() {
      var me = this;

      me.setCurrentTime(0);
      me.pause();
    }

    /**
     * The duration property returns the length of the current audio/video, in seconds.
     * @return {number} duration, A Number representing the length of the video, in seconds. If no video is set, "NaN" (Not-a-Number) is returned.
     */

  }, {
    key: 'getDuration',
    value: function getDuration() {
      return this.refs.ReactVideo.duration;
    }

    /**
     * Returns the current time of the media, in seconds.
     * @return {Number} seconds.
     */

  }, {
    key: 'getCurrentTime',
    value: function getCurrentTime() {
      return this.refs.ReactVideo.currentTime;
    }

    /**
     * Retun the current volume of the video.
     * @return {number} Must be a number between 0.0 and 1.0.
     */

  }, {
    key: 'getVolume',
    value: function getVolume() {
      return this.state.volume;
    }

    /**
     * The TimeRanges object represents the user's buffered ranges of the video.
     * @return {object} TimeRanges Object.
     * length - get the number of buffered ranges in the audio/video
     * start(index) - get the start position of a buffered range
     * end(index) - get the end position of a buffered range
     */

  }, {
    key: 'getBuffered',
    value: function getBuffered() {
      var vid = this.refs.ReactVideo;

      return vid.buffured;
    }

    /**
     * @return {number} Number, the current playback speed.
     */

  }, {
    key: 'getPlaybackRate',
    value: function getPlaybackRate() {
      return this.state.playbackRate;
    }

    /**
     * Returns the value of url.
     * @return {string} return the src value of the video.
     */

  }, {
    key: 'getUrl',
    value: function getUrl() {
      return this.refs.ReactVideo.url;
    }

    /**
     * Set the current time of the media.
     * @param {Number} time The time, in seconds.
     * @return {Number} return time in seconds.
     */

  }, {
    key: 'setCurrentTime',
    value: function setCurrentTime(time) {
      this.refs.ReactVideo.currentTime = time;

      return time;
    }

    /**
     * Set the current volume of the media.
     * @param {number} volume, Specifies the current volume of the audio/video. Must be a number between 0.0 and 1.0. 
     */

  }, {
    key: 'setVolume',
    value: function setVolume(volume) {
      this.setState({ volume: volume });

      this.refs.ReactVideo.volume = this.getVolume();
    }

    /**
     * Set video to play in slow motion.
     * The playbackRate property sets the current playback speed of the video.
     * @param {number} rate, Indicates the current playback speed of the video.
     * @example
     * 1.0 is normal speed
     * 0.5 is half speed (slower)
     * 2.0 is double speed (faster)
     * -1.0 is backwards, normal speed
     * -0.5 is backwards, half speed
     */

  }, {
    key: 'setPlaybackRate',
    value: function setPlaybackRate(rate) {
      this.setState({
        playbackRate: rate
      });

      this.setState({
        playbackRate: this.getPlaybackRate()
      });
    }

    /**
     * Toggles the media playback state.
     */

  }, {
    key: 'toggle',
    value: function toggle() {
      if (this.isPlaying()) {
        this.pause();
      } else {
        this.play();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var notSupportedMessage = _props.notSupportedMessage;
      var cls = _props.cls;
      var source = _props.source;

      return _react2.default.createElement(
        'video',
        _extends({ ref: 'ReactVideo', className: 'video ' + cls }, this.props),
        notSupportedMessage,
        source.map(function (item, i) {
          return _react2.default.createElement('source', { src: item.src, type: item.type, key: i });
        })
      );
    }
  }]);

  return ReactVideo;
}(_react2.default.Component);

exports.default = ReactVideo;

ReactVideo.defaultProps = {
  cls: void 0,
  autoPlay: false,
  src: void 0,
  source: [],
  controls: true,
  loop: false,
  muted: false,
  posterUrl: void 0,
  preload: true,
  width: null,
  height: null,
  notSupportedMessage: 'Sorry your browser does not support HTML5 video',
  style: {}
};

ReactVideo.propTypes = {
  cls: _react2.default.PropTypes.string,
  autoPause: _react2.default.PropTypes.bool,
  autoResume: _react2.default.PropTypes.bool,
  source: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.object),
  src: _react2.default.PropTypes.string,
  controls: _react2.default.PropTypes.bool,
  loop: _react2.default.PropTypes.bool,
  posterUrl: _react2.default.PropTypes.string,
  preload: _react2.default.PropTypes.bool,
  style: _react2.default.PropTypes.object,
  notSupportedMessage: _react2.default.PropTypes.string
};